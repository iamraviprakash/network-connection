{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["USER_QUERY","gql","UserList","result","loading","error","data","user","id","name","App","client","useApolloClient","useState","setResult","formEditState","setFormEditState","handleInput","a","query","variables","queryResult","className","onChange","online","console","log","render","disabled","placeholder","e","target","value","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","ApolloClient","link","cache","InMemoryCache","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"seAMA,IAAMA,EAAaC,IAAH,KASVC,EAAW,SAAC,GAAsC,IAAD,IAApCC,OAASC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC1C,OAAIF,EAAgB,4CAChBC,EAAc,sCACdC,EAAKC,KAEL,6BACE,oCAAUD,EAAKC,KAAKC,GAApB,UAA+BF,EAAKC,KAAKE,OAItC,gDAqEIC,MAhEf,WAEE,IAAMC,EAASC,cAFF,EAIeC,mBAAS,CACnCT,SAAS,EACTC,MAAO,KACPC,KAAM,OAPK,mBAINH,EAJM,KAIEW,EAJF,OAU6BD,oBAAS,GAVtC,mBAUNE,EAVM,KAUSC,EAVT,KAuBPC,EAAW,uCAAG,WAAOT,GAAP,eAAAU,EAAA,sEACQP,EAAOQ,MAAM,CACrCA,MAAOnB,EACPoB,UAAW,CAAEZ,GAAIA,KAHD,OACZa,EADY,OAKlBP,EAAUO,GALQ,2CAAH,sDAQjB,OACE,yBAAKC,UAAU,OACb,kBAAC,WAAD,CACEC,SAtB2B,SAACC,GAChCC,QAAQC,IAAIF,GAGVR,GADEQ,IAoBAG,OAAQ,YAAiB,IAAdH,EAAa,EAAbA,OAET,OADAC,QAAQC,IAAI,CAAC,cAAiBX,IAE5B,yBAAKO,UAAWE,EAAS,SAAW,WAApC,qBACqBA,EAAS,SAAW,cAO/C,8BAAUF,UAAU,OAAOM,SAAUb,GACnC,8BACE,2BACEc,YAAY,yBACZN,SAAU,SAAAO,GAAC,OAAKb,EAAYa,EAAEC,OAAOC,YAO3C,yBAAKV,UAAU,aACb,kBAAC,EAAD,CAAUnB,OAAQA,OC5EN8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCNAC,EAAWC,YAAe,CAC9BC,IAAK,0BAGD7B,EAAS,IAAI8B,IAAa,CAC9BC,KAAMJ,EACNK,MAAO,IAAIC,MAGbC,IAASlB,OACP,kBAAC,IAAD,CAAgBhB,OAAQA,GACtB,kBAAC,EAAD,OAEFmC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLoB,QAAQpB,MAAMA,EAAMkD,c","file":"static/js/main.d03fdfb4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Detector } from \"react-detect-offline\";\nimport gql from 'graphql-tag';\nimport './App.css';\nimport { useApolloClient } from \"@apollo/react-hooks\";\n\nconst USER_QUERY = gql`\n  query ($id: ID!){\n    user(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\nconst UserList = ({result: {loading, error, data}}) => {\n  if (loading) return <div>Fetching...</div>;\n  if (error) return <div>Error</div>;\n  if (data.user) {\n    return (\n      <div>\n        <div>ID: {data.user.id} Name: {data.user.name}</div>\n      </div>\n    )\n  } else {\n    return <div>User Not Found</div>\n  }\n}\n\n\nfunction App() {\n\n  const client = useApolloClient();\n\n  const [result, setResult] = useState({\n    loading: true,\n    error: null,\n    data: null\n  });\n\n  const [formEditState, setFormEditState] = useState(true)\n\n  const handleConnectivityChange = (online) => {\n    console.log(online);\n\n    if (online) {\n      setFormEditState(false)\n    } else {\n      setFormEditState(true)\n    }\n  }\n\n\n  const handleInput = async (id) => {\n    const queryResult = await client.query({\n      query: USER_QUERY,\n      variables: { id: id }\n    });\n    setResult(queryResult);\n  }\n\n  return (\n    <div className=\"App\">\n      <Detector\n        onChange={handleConnectivityChange}\n        render={({ online }) => {\n          console.log({\"formEditState\": formEditState});\n          return (\n            <div className={online ? \"online\" : \"offline\"}>\n              You are currently {online ? \"online\" : \"offline\"}\n            </div>\n          )\n        }}\n      />\n\n      {/* Form */}\n      <fieldset className=\"form\" disabled={formEditState}>\n        <form>\n          <input\n            placeholder=\"What needs to be done?\"\n            onChange={e => (handleInput(e.target.value))}\n          />\n        </form>\n      </fieldset>\n      \n\n      {/* Results */}\n      <div className=\"user-list\">\n        <UserList result={result} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from  'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}